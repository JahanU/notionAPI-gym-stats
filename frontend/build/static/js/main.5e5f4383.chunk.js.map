{"version":3,"sources":["components/StatsInput.js","App.js","index.js"],"names":["gymLabels","pushExercises","map","Map","StatsInput","useState","selectedGymLabel","setSelectedGymLabel","exercises","setExercises","selectedExercise","setSelectedExercise","weight","setWeight","rep","setRep","comment","setComment","notionCode","setNotionCode","error","setError","message","setMessage","submitStats","e","a","preventDefault","console","log","payload","tag","exercise","reps","fetch","method","headers","body","JSON","stringify","ok","Error","className","onSubmit","onChange","input","target","value","has","get","label","htmlFor","type","set","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e5f4383.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nlet gymLabels = [\n    'Push', 'Pull', 'Legs'\n];\n\nlet pushExercises = [\n    'Bench Press', 'Incline Bench', 'Decline Bench',\n    'Decline Flys', 'Cable Flys', 'Machine Flys',\n    'Overhead Press', 'Dips', 'Seated Dips', 'Cable Push Down'\n];\n\nlet pullExercises = [\n    'Lat Pull Down', 'Seated Row', 'Deadlift', 'Sumo Lift', 'Pull Ups'\n];\n\nlet legExercises = [\n    'Calf Press', 'Calves Raises', 'Leg Curl',\n    'Leg Extension', 'Leg Press', 'Squat'\n];\n\nlet map = new Map();\nmap.set('Push', pushExercises);\nmap.set('Pull', pullExercises);\nmap.set('Legs', legExercises);\n\n\nexport default function StatsInput() {\n\n    const [selectedGymLabel, setSelectedGymLabel] = useState(gymLabels[0]);\n    const [exercises, setExercises] = useState(pushExercises);\n    const [selectedExercise, setSelectedExercise] = useState(pushExercises[0]);\n    const [weight, setWeight] = useState(0);\n    const [rep, setRep] = useState(0);\n    const [comment, setComment] = useState(0);\n    const [notionCode, setNotionCode] = useState(null);\n    const [error, setError] = useState(false);\n    const [message, setMessage] = useState('');\n\n    const onGymLabelhandler = (input) => {\n        setMessage('');\n        setSelectedGymLabel(input.target.value);\n\n        if (map.has(input.target.value)) { // Update list of excersises based on label\n            setExercises(map.get(input.target.value));\n        }\n    }\n\n    const onExcerciseHandler = (input) => {\n        setMessage('');\n        setSelectedExercise(input.target.value);\n    }\n\n    const onWeightHandler = (input) => {\n        setMessage('');\n        setWeight(input.target.value);\n    }\n\n    const onRepHandler = (input) => {\n        setMessage('');\n        setRep(input.target.value);\n    }\n\n    const onCommentHandler = (input) => {\n        setMessage('');\n        setComment(input.target.value);\n    }\n\n    const onNotionCodeHandler = (input) => {\n        setNotionCode(input.target.value);\n    }\n\n    const submitStats = async (e) => {\n        e.preventDefault();\n        console.log(selectedGymLabel, selectedExercise, weight, notionCode);\n\n        let payload = {\n            tag: selectedGymLabel,\n            exercise: selectedExercise,\n            weight: weight,\n            reps: rep,\n            comment: comment,\n            notionCode: notionCode\n        }\n\n        console.log(payload);\n\n        // const url = 'https://notionapi-gym-stats.herokuapp.com/post-gym-stats';\n        const url = 'http://localhost:4000/post-gym-stats';\n\n        try {\n            const resp = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!resp.ok) {\n                throw new Error('Request failed!');\n            }\n            setError(false);\n            setMessage('Successfully submitted stats!');\n        }\n        catch (err) {\n            setError(true);\n        }\n    }\n\n    return (\n        <form className='form-control' onSubmit={submitStats}>\n            {error && <span className='error-text'>Error with request</span>}\n            {message && <span className='success-text'>{message}</span>}\n\n            <div className='control-group'>\n                <label>Gym Day</label>\n                <select onChange={onGymLabelhandler}>\n                    {gymLabels.map(label =>\n                        <option key={label}>{label}</option>\n                    )}\n                </select>\n\n                <label htmlFor=\"exercises\">Exercises</label>\n                <select onChange={onExcerciseHandler}>\n                    {exercises.map(exercise =>\n                        <option key={exercise}>{exercise}</option>\n                    )}\n                </select>\n\n\n                <label htmlFor=\"weight\">Weight</label>\n                <input type=\"number\" onChange={onWeightHandler} />\n\n                <label htmlFor=\"reps\">Reps</label>\n                <input type=\"number\" onChange={onRepHandler} />\n\n                <label htmlFor=\"comment\">Comments</label>\n                <input onChange={onCommentHandler} />\n\n                <label htmlFor=\"notion\">Notion Code</label>\n                <input type=\"number\" onChange={onNotionCodeHandler} />\n            </div>\n\n            <div className='form-actions'>\n                <button>Submit</button>\n            </div>\n\n        </form>\n    );\n\n}\n\n","import StatsInput from './components/StatsInput';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <StatsInput />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}