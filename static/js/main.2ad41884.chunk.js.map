{"version":3,"sources":["components/StatsInput.js","App.js","index.js"],"names":["gymLabels","pushExercises","map","Map","StatsInput","useState","selectedGymLabel","setSelectedGymLabel","exercises","setExercises","selectedExercise","setSelectedExercise","weight","setWeight","notionCode","setNotionCode","error","setError","submitStats","e","a","preventDefault","console","log","payload","tag","exercise","fetch","method","headers","body","JSON","stringify","resp","ok","Error","className","onSubmit","onChange","input","target","value","has","get","label","htmlFor","type","set","App","ReactDOM","render","document","getElementById"],"mappings":"6NAGIA,EAAY,CAAC,OAAQ,OAAQ,QAE7BC,EAAgB,CAAC,cAAe,gBAAiB,gBACjD,eAAgB,aAAc,eAC9B,iBAAkB,OAAQ,eAQ1BC,EAAM,IAAIC,IAMC,SAASC,IAEpB,MAAgDC,mBAASL,EAAU,IAAnE,mBAAOM,EAAP,KAAyBC,EAAzB,KACA,EAAkCF,mBAASJ,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgDJ,mBAASJ,EAAc,IAAvE,mBAAOS,EAAP,KAAyBC,EAAzB,KACA,EAA4BN,mBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAoCR,mBAAS,MAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA0BV,oBAAS,GAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAsBMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAChBD,EAAEE,iBACFC,QAAQC,IAAIjB,EAAkBI,EAAkBE,EAAQE,GAEpDU,EAAU,CACVC,IAAKnB,EACLoB,SAAUhB,EACVE,OAAQA,EACRE,WAAYA,GAGhBQ,QAAQC,IAAIC,GAEA,2DAbI,kBAiBOG,MAJX,2DAIsB,CAC1BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,KAtBb,WAiBNS,EAjBM,QAyBFC,GAzBE,uBA0BRZ,QAAQC,IAAIU,GACN,IAAIE,MAAM,mBA3BR,QA8BZlB,GAAS,GA9BG,kDAiCZA,GAAS,GAjCG,0DAAH,sDAsCjB,OACI,uBAAMmB,UAAU,eAAeC,SAAUnB,EAAzC,UACKF,GAAS,sBAAMoB,UAAU,aAAhB,gCACV,sBAAKA,UAAU,gBAAf,UACI,4CACA,wBAAQE,SA/DM,SAACC,GACvBhC,EAAoBgC,EAAMC,OAAOC,OAE7BvC,EAAIwC,IAAIH,EAAMC,OAAOC,QACrBhC,EAAaP,EAAIyC,IAAIJ,EAAMC,OAAOC,SA2D9B,SACKzC,EAAUE,KAAI,SAAA0C,GAAK,OAChB,iCAAqBA,GAARA,QAIrB,uBAAOC,QAAQ,YAAf,uBACA,wBAAQP,SA9DO,SAACC,GACxB5B,EAAoB4B,EAAMC,OAAOC,QA6DzB,SACKjC,EAAUN,KAAI,SAAAwB,GAAQ,OACnB,iCAAwBA,GAAXA,QAIrB,uBAAOmB,QAAQ,SAAf,oBACA,uBAAOC,KAAK,SAASR,SAjET,SAACC,GACrB1B,EAAU0B,EAAMC,OAAOC,UAkEf,uBAAOI,QAAQ,SAAf,yBACA,uBAAOC,KAAK,SAASR,SAhEL,SAACC,GACzBxB,EAAcwB,EAAMC,OAAOC,aAmEvB,qBAAKL,UAAU,eAAf,SACI,iDAnGhBlC,EAAI6C,IAAI,OAAQ9C,GAChBC,EAAI6C,IAAI,OARY,CAAC,gBAAiB,aAAc,WAAY,aAShE7C,EAAI6C,IAAI,OAPW,CAAC,aAAc,gBAAiB,WAC/C,gBAAiB,YAAa,UCFnBC,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAChC,EAAD,OCAN6C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2ad41884.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nlet gymLabels = ['Push', 'Pull', 'Legs'];\n\nlet pushExercises = ['Bench Press', 'Incline Bench', 'Decline Bench',\n    'Decline Flys', 'Cable Flys', 'Machine Flys',\n    'Overhead Press', 'Dips', 'Seated Dips'];\n\nlet pullExercises = ['Lat Pull Down', 'Seated Row', 'Deadlift', 'Pull Ups'];\n\nlet legExercises = ['Calf Press', 'Calves Raises', 'Leg Curl',\n    'Leg Extension', 'Leg Press', 'Squat'\n];\n\nlet map = new Map();\nmap.set('Push', pushExercises);\nmap.set('Pull', pullExercises);\nmap.set('Legs', legExercises);\n\n\nexport default function StatsInput() {\n\n    const [selectedGymLabel, setSelectedGymLabel] = useState(gymLabels[0]);\n    const [exercises, setExercises] = useState(pushExercises);\n    const [selectedExercise, setSelectedExercise] = useState(pushExercises[0]);\n    const [weight, setWeight] = useState(0);\n    const [notionCode, setNotionCode] = useState(null);\n    const [error, setError] = useState(false);\n\n    const onGymLabelhandler = (input) => {\n        setSelectedGymLabel(input.target.value);\n\n        if (map.has(input.target.value)) { // Update list of excersises based on label\n            setExercises(map.get(input.target.value));\n        }\n    }\n\n    const onExcerciseHandler = (input) => {\n        setSelectedExercise(input.target.value);\n    }\n\n    const onWeightHandler = (input) => {\n        setWeight(input.target.value);\n    }\n\n    const onNotionCodeHandler = (input) => {\n        setNotionCode(input.target.value);\n    }\n\n    const submitStats = async (e) => {\n        e.preventDefault();\n        console.log(selectedGymLabel, selectedExercise, weight, notionCode);\n\n        let payload = {\n            tag: selectedGymLabel,\n            exercise: selectedExercise,\n            weight: weight,\n            notionCode: notionCode\n        }\n\n        console.log(payload);\n\n        const url = 'https://notionapi-gym-stats.herokuapp.com/post-gym-stats';\n        // const url = 'http://localhost:4000/post-gym-stats';\n\n        try {\n            const resp = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n\n            if (!resp.ok) {\n                console.log(resp);\n                throw new Error('Request failed!');\n            }\n\n            setError(false);\n        }\n        catch (err) {\n            setError(true);\n        }\n\n    }\n\n    return (\n        <form className='form-control' onSubmit={submitStats}>\n            {error && <span className='error-text'>Error with request</span>}\n            <div className='control-group'>\n                <label>Gym Day</label>\n                <select onChange={onGymLabelhandler}>\n                    {gymLabels.map(label =>\n                        <option key={label}>{label}</option>\n                    )}\n                </select>\n\n                <label htmlFor=\"exercises\">Exercises</label>\n                <select onChange={onExcerciseHandler}>\n                    {exercises.map(exercise =>\n                        <option key={exercise}>{exercise}</option>\n                    )}\n                </select>\n\n                <label htmlFor=\"weight\">Weight</label>\n                <input type=\"number\" onChange={onWeightHandler} />\n\n                <label htmlFor=\"notion\">Notion Code</label>\n                <input type=\"number\" onChange={onNotionCodeHandler} />\n\n            </div>\n\n            <div className='form-actions'>\n                <button>Submit</button>\n            </div>\n\n        </form>\n    );\n\n}\n\n","import StatsInput from './components/StatsInput';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <StatsInput />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}